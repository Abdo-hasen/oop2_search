{\rtf1\fbidis\ansi\ansicpg1252\deff0{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red255\green0\blue0;\red155\green187\blue89;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\ltrpar\sa200\sl276\slmult1\qc\cf1\lang9\ul\b\f0\fs36 Magic methods ( get - set - call - call static ...etc)\par
\pard\ltrpar\sa200\sl276\slmult1\cf0\ulnone                   ###########################\par
\par
\pard\ltrpar\sa200\sl276\slmult1\qc In PHP, magic methods are special methods that have special behavior and are\par
 automatically called by the PHP runtime in response to certain actions or events. Here are some examples of commonly used magic methods in PHP\par
:\par
\par
1. `__get()` and `__set()`: These magic methods are used to intercept attempts to read or write to inaccessible or undefined properties of an object. For example:\par
\par
```\par
\par
class Person \{\par
    private $name;\par
\par
    public function __get($property) \{\par
        if ($property === 'name') \{\par
            return $this->name;\par
        \}\par
    \}\par
\par
    public function __set($property, $value) \{\par
        if ($property === 'name') \{\par
            $this->name = $value;\par
        \}\par
    \}\par
\}\par
\par
$person = new Person();\par
$person->name = 'John'; // Calls __set() magic method\par
echo $person->name; // Calls __get() magic method and prints "John"\par
```\par
\par
2. `__call()` and `__callStatic()`: These magic methods are used to intercept calls to undefined or inaccessible methods of an object or class, respectively. For example:\par
\par
```\par
class Math \{\par
    public static function __callStatic($name, $arguments) \{\par
        if ($name === 'add') \{\par
            return array_sum($arguments);\par
        \}\par
    \}\par
\}\par
\par
echo Math::add(1, 2, 3); // Calls __callStatic() magic method and prints "6"\par
```\par
\par
In this example, the `Math` class defines the `__callStatic()` magic method to intercept calls to undefined static methods. The method checks if the method name is 'add' and returns the sum of the arguments if it is.\par
\par
These are just a few examples of the many magic methods available in PHP. Magic methods can be used to implement a variety of advanced features and behaviors in PHP classes. It's important to use them judiciously and understand their limitations and potential side effects.\par
\par
\par
##############################################################\par
\par
\cf2\ul OOP vs functional Vs procedural programming\par
\cf0\ulnone ###########################\par
\par
Object-oriented programming (OOP), functional programming, and procedural programming are all programming paradigms that offer different approaches to solving problems.\par
\par
Procedural programming is the traditional way of writing code, where the focus is on writing a sequence of instructions that operate on data. This approach is based on the concept of procedures or functions, which are reusable blocks of code that can be called from other parts of the program. Procedural programming is typically used for small to medium-sized programs and is well-suited for tasks that involve simple data processing and manipulation.\par
\par
Functional programming is a programming paradigm that emphasizes the use of functions to solve problems. In this approach, functions are treated as first-class citizens, meaning that they can be passed as arguments to other functions, returned as values from functions, and assigned to variables. Functional programming is based on the principles of immutability and referential transparency, which means that functions do not modify the data they operate on and always return the same output for the same input. This approach is well-suited for tasks that involve complex data processing and manipulation, and is often used in the development of scientific, mathematical, and financial applications.\par
\par
Object-oriented programming is a programming paradigm that emphasizes the use of objects to model real-world entities and their interactions. In this approach, data and behavior are encapsulated within objects, which can communicate with each other and change their internal state based on messages received from other objects. Object-oriented programming is based on the principles of abstraction, inheritance, and polymorphism, which allow for the creation of complex systems that can be easily extended and modified. This approach is well-suited for tasks that involve complex interactions between different entities, such as user interfaces, games, and simulations.\par
\par
In summary, each programming paradigm offers a different approach to solving problems, and the choice of paradigm depends on the specific requirements of the task at hand. Procedural programming is suitable for small to medium-sized programs that involve simple data processing and manipulation, functional programming is suitable for complex data processing and manipulation, and object-oriented programming is suitable for complex interactions between different entities.\par
\par
##############################################################\par
\par
\cf2\ul Cloning in php ( shallow copy and deep copy)\par
\cf0\ulnone ###########################\par
\par
In PHP, cloning is the process of creating a copy of an object. When an object is cloned, a new instance of the object is created with the same properties and values as the original object.\par
\par
There are two types of cloning in PHP: shallow copy and deep copy.\par
\par
Shallow copy: A shallow copy creates a new object that is a copy of the original object, but the properties of the new object still reference the same objects as the original object. In other words, the new object and the original object share the same references to any objects that are properties of the original object. Shallow copying can be performed using the default `clone` keyword in PHP.\par
\par
Here's an example of shallow copying in PHP:\par
\par
```\par
class Person \{\par
    public $name;\par
    public $age;\par
\par
    public function __clone() \{\par
        // This method is called when the object is cloned\par
    \}\par
\}\par
\par
$person1 = new Person();\par
$person1->name = 'John';\par
$person1->age = 30;\par
\par
$person2 = clone $person1;\par
$person2->age = 40;\par
\par
echo $person1->age; // Outputs 30\par
echo $person2->age; // Outputs 40\par
```\par
\par
In this example, `$person2` is a shallow copy of `$person1`, meaning that the properties of `$person2` reference the same objects as the properties of `$person1`.\par
\par
Deep copy: A deep copy creates a new object that is a complete copy of the original object, including any objects that are properties of the original object. In other words, the new object and the original object have separate and distinct references to any objects that are properties of the original object. Deep copying can be achieved using custom cloning logic in PHP.\par
\par
Here's an example of deep copying in PHP:\par
\par
```\par
class Person \{\par
    public $name;\par
    public $age;\par
\par
    public function __clone() \{\par
        $this->name = clone $this->name;\par
    \}\par
\}\par
\par
$name = new stdClass();\par
$name->first = 'John';\par
$name->last = 'Doe';\par
\par
$person1 = new Person();\par
$person1->name = $name;\par
$person1->age = 30;\par
\par
$person2 = clone $person1;\par
$person2->name->last = 'Smith';\par
\par
echo $person1->name->last; // Outputs "Doe"\par
echo $person2->name->last; // Outputs "Smith"\par
```\par
\par
In this example, `$person2` is a deep copy of `$person1`, meaning that the properties of `$person2` have separate and distinct references to any objects that are properties of `$person1`. The custom `__clone()` method in the `Person` class ensures that the `$name` property is deep copied as well, so that changes to the `$name` property of `$person2` do not affect the `$name` property of `$person1`.\par
\par
It's important to note that cloning can have performance implications and should be used judiciously. Additionally, custom cloning logic can be complex and error-prone, so it's important to thoroughly test any cloned objects to ensure that they behave as expected.\par
\par
}
 